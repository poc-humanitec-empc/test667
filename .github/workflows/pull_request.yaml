name: Pull Request
on:
  pull_request:
    types: [opened, reopened, synchronize]
permissions:
  contents: read
  pull-requests: write
env:
  APP_NAME: test667
  IMAGE: test667
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  AZURE_ACR_NAME: ${{ vars.AZURE_ACR_NAME }}

  BASE_ENVIRONMENT: 'development'
  ENVIRONMENT_TYPE: 'development'
  SCORE_HUMANITEC_VERSION: '0.10.2'
  HUMCTL_VERSION: '0.15.0'
  ENVIRONMENT_ID: pr-${{ github.event.number }}
  ENVIRONMENT_NAME: PR-${{ github.event.number }}


jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
      - uses: humanitec/setup-cli-action@v1
        with:
          version: ${{ env.HUMCTL_VERSION }}
      - name: Create Humanitec Env
        run: |
          humctl create environment ${{ env.ENVIRONMENT_ID }} \
              --token ${{ secrets.HUMANITEC_TOKEN }} \
              --org ${{ vars.HUMANITEC_ORG_ID }} \
              --app ${{ env.APP_NAME }} \
              --name ${{ env.ENVIRONMENT_NAME }} \
              -t ${{ env.ENVIRONMENT_TYPE }} \
              --from ${{ env.BASE_ENVIRONMENT }} \
              || true
      - uses: score-spec/setup-score@v2
        with:
          file: score-humanitec
          version: ${{ env.SCORE_HUMANITEC_VERSION }}
      - name: Set Tag with SHA
        run: echo "TAG=`echo $GITHUB_SHA | cut -c 1-7`" >> $GITHUB_ENV

      - name: configure azure credentials
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: login to azure acr
        run: |
          az acr login -n ${{ env.AZURE_ACR_NAME }}
          echo "CONTAINER_REGISTRY=${{ env.AZURE_ACR_NAME }}.azurecr.io" >> "$GITHUB_ENV"


      - run: docker build --platform linux/amd64 . -t $CONTAINER_REGISTRY/$IMAGE:$TAG
      - run: docker push $CONTAINER_REGISTRY/$IMAGE:$TAG

      - name: Inform Humanitec
        run: |-
          humctl create artefact-version \
            --token ${{ secrets.HUMANITEC_TOKEN }} \
            --org ${{ vars.HUMANITEC_ORG_ID }} \
            -t container \
            -n $CONTAINER_REGISTRY/$IMAGE \
            --version $TAG \
            --ref $GITHUB_REF \
            --commit $GITHUB_SHA

      - name: Run Score
        run: |
          score-humanitec delta \
              --retry \
              --deploy \
              --token ${{ secrets.HUMANITEC_TOKEN }} \
              --org ${{ vars.HUMANITEC_ORG_ID }} \
              --app ${{ env.APP_NAME }} \
              --env ${{ env.ENVIRONMENT_ID }} \
              -f score.yaml \
              --extensions humanitec.score.yaml \
              --workload-source-url "https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/score.yaml" \
              --image $CONTAINER_REGISTRY/$IMAGE:$TAG \
              --message "$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "${{ github.event.pull_request.commits_url }}?per_page=10" | jq -r .[-1].commit.message)" \
              | tee score_output.json
      - name: Wait for deployment
        run: |
          sleep 1

          DEPLOYMENT_ID=$(humctl get deployment . -o json \
              --token ${{ secrets.HUMANITEC_TOKEN }} \
              --org ${{ vars.HUMANITEC_ORG_ID }} \
              --app ${{ env.APP_NAME }} \
              --env ${{ env.ENVIRONMENT_ID }} \
              | jq -r .metadata.id)
          echo "DEPLOYMENT_ID=${DEPLOYMENT_ID}" >> ${{ github.env }}

          IS_DONE=false

          while [ "$IS_DONE" = false ]; do
            CURRENT_STATUS=$(humctl get deployment ${DEPLOYMENT_ID} -o json \
              --token ${{ secrets.HUMANITEC_TOKEN }} \
              --org ${{ vars.HUMANITEC_ORG_ID }} \
              --app ${{ env.APP_NAME }} \
              --env ${{ env.ENVIRONMENT_ID }} \
              | jq -r .status.status)

            if [ "$CURRENT_STATUS" = "in progress" ]; then
              echo "Deployment still in progress..."
              sleep 1
            elif [ "$CURRENT_STATUS" = "failed" ]; then
              echo "Deployment failed!"
              IS_DONE=true
            else
              echo "Deployment complete!"
              IS_DONE=true
            fi
          done
          if [ "$CURRENT_STATUS" = "failed" ]; then
              exit 1
          fi
      - name: Build Comment Message
        if: ${{ always() }}
        run: |
          ENV_URL="https://app.humanitec.io/orgs/"${{ vars.HUMANITEC_ORG_ID }}"/apps/"${{ env.APP_NAME }}"/envs/"${{ env.ENVIRONMENT_ID }}"/deploys/"${DEPLOYMENT_ID}
          DOMAINS=$(humctl get active-resources \
                      --token ${{ secrets.HUMANITEC_TOKEN }} \
                      --org ${{ vars.HUMANITEC_ORG_ID }} \
                      --app ${{ env.APP_NAME }} \
                      --env ${{ env.ENVIRONMENT_ID }} -o json \
                      | jq -r '. | map(. | select(.metadata.type == "dns")) | map((.metadata.res_id | split(".") | .[1]) + ": [" + .status.resource.host + "](https://" + .status.resource.host + ")") | join("\n")')

          DEPLOYMENT_ERRORS=$(humctl get deployment-error \
              --token ${{ secrets.HUMANITEC_TOKEN }} \
              --org ${{ vars.HUMANITEC_ORG_ID }} \
              --app ${{ env.APP_NAME }} \
              --env ${{ env.ENVIRONMENT_ID }} -o json)
          if [ "$DEPLOYMENT_ERRORS" = "[]" ]; then
            echo "## Deployment successfully completed for ${{ env.ENVIRONMENT_NAME }}! :tada:" >> pr_message.txt
            echo "" >> pr_message.txt
          else
            echo "## Deployment failed for ${{ env.ENVIRONMENT_NAME }}! :x:" >> pr_message.txt
            echo "" >> pr_message.txt
            echo "### Errors:" >> pr_message.txt
            echo "" >> pr_message.txt
            echo '```json' >> pr_message.txt
            echo "" >> pr_message.txt
            echo "$DEPLOYMENT_ERRORS" | jq .[0].status.message -r >> pr_message.txt
            echo "" >> pr_message.txt
            echo '```' >> pr_message.txt
            echo "" >> pr_message.txt
            echo "<details><summary>Errors details</summary>" >> pr_message.txt
            echo "" >> pr_message.txt
            echo "### Errors details:" >> pr_message.txt
            echo '```json' >> pr_message.txt
            echo "" >> pr_message.txt
            echo "$DEPLOYMENT_ERRORS" >> pr_message.txt
            echo "" >> pr_message.txt
            echo '```' >> pr_message.txt
            echo "" >> pr_message.txt
            echo "</details>" >> pr_message.txt
            echo "" >> pr_message.txt
          fi

          echo "### [View in Humanitec]($ENV_URL)" >> pr_message.txt
          echo "Deployment ID: $DEPLOYMENT_ID" >> pr_message.txt

          echo "" >> pr_message.txt
          echo "### Domains:" >> pr_message.txt
          echo "" >> pr_message.txt
          echo "$DOMAINS" >> pr_message.txt
          echo "" >> pr_message.txt

          echo "<details><summary>Deployment diff</summary>" >> pr_message.txt
          echo "" >> pr_message.txt
          echo "### Deployment diff:" >> pr_message.txt
          echo '```json' >> pr_message.txt
          echo "" >> pr_message.txt
          humctl diff sets env/${{ env.ENVIRONMENT_ID }} env/${{ env.BASE_ENVIRONMENT }} \
              --token ${{ secrets.HUMANITEC_TOKEN }} \
              --org ${{ vars.HUMANITEC_ORG_ID }} \
              --app ${{ env.APP_NAME }} -o json >> pr_message.txt
          echo "" >> pr_message.txt
          echo '```' >> pr_message.txt
          echo "" >> pr_message.txt
          echo "</details>" >> pr_message.txt

          if [ "$DEPLOYMENT_ERRORS" = "[]" ]; then
            echo "<details><summary>Active Resources Usage</summary>" >> pr_message.txt
            echo "" >> pr_message.txt
            echo "### Active Resources Usage:" >> pr_message.txt
            echo '```none' >> pr_message.txt
            echo "" >> pr_message.txt
            humctl resources active-resource-usage \
                --env ${{ env.ENVIRONMENT_ID }} \
                --token ${{ secrets.HUMANITEC_TOKEN }} \
                --org ${{ vars.HUMANITEC_ORG_ID }} \
                --app ${{ env.APP_NAME }} >> pr_message.txt
            echo "" >> pr_message.txt
            echo '```' >> pr_message.txt
            echo "" >> pr_message.txt
            echo "</details>" >> pr_message.txt
          fi
          if [ "$DEPLOYMENT_ERRORS" = "[]" ]; then
            echo "<details><summary>Resources Graph</summary>" >> pr_message.txt
            echo "" >> pr_message.txt
            echo "### Resources Graph:" >> pr_message.txt
            echo '```none' >> pr_message.txt
            echo "" >> pr_message.txt
            humctl resources graph \
                --env ${{ env.ENVIRONMENT_ID }} \
                --token ${{ secrets.HUMANITEC_TOKEN }} \
                --org ${{ vars.HUMANITEC_ORG_ID }} \
                --app ${{ env.APP_NAME }} >> pr_message.txt
            echo "" >> pr_message.txt
            echo '```' >> pr_message.txt
            echo "" >> pr_message.txt
            echo "</details>" >> pr_message.txt
          fi
          
          echo "<details><summary>Score Output</summary>" >> pr_message.txt
          echo "" >> pr_message.txt
          echo "### Score Output:" >> pr_message.txt
          echo '```json' >> pr_message.txt
          echo "" >> pr_message.txt
          cat score_output.json >> pr_message.txt
          echo "" >> pr_message.txt
          echo '```' >> pr_message.txt
          echo "" >> pr_message.txt
          echo "</details>" >> pr_message.txt

          cat pr_message.txt
      - name: Comment PR
        if: ${{ always() }}
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: pr_message.txt


